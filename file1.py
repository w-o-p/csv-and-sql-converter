# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'flag.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import csv
import sqlite3
from PyQt5.QtWidgets import QMainWindow
from graph_search import Ui_Dialog


class Example(Ui_Dialog, QMainWindow):
    def __init__(self, name='', type='', table=''):
        super().__init__()
        self.categories = []
        self.values = []
        self.rows = []
        self.file_type = type
        self.file_name = name
        self.table = table
        self.open = False
        if self.file_type == 'csv':
            self.open_file_csv()
        elif self.file_type == 'sqlite' or self.file_type == 'db' or self.file_type == 'db3':
            self.open_file_sql()
        self.setupUi(self, self.categories, self.values)

        if self.open:
            self.pushButton.clicked.connect(self.find)

    def open_file_csv(self):
        with open(self.file_name, encoding="utf8") as csvfile:
            self.open = True
            reader = csv.reader(csvfile, delimiter=';', quotechar='"')
            for index, row in enumerate(reader):
                if index == 0:
                    self.categories = row
                else:
                    self.rows.append(row)
            self.values = []
            for i in range(len(self.categories)):
                column = []
                for j in range(len(self.rows)):
                    column.append(self.rows[j][i])
                self.values.append(list(set(column)))

    def open_file_sql(self):
        con = sqlite3.connect(self.file_name)
        cur = con.cursor()
        result = cur.execute('''SELECT * FROM {}'''.format(self.table)).fetchall()
        for i in range(len(cur.description)):
            self.categories.append(cur.description[i][0])
        for elem in result:
            self.rows.append(list(elem))
        self.values = []
        for i in range(len(self.categories)):
            column = []
            for j in range(len(self.rows)):
                column.append(self.rows[j][i])
            self.values.append(list(set(column)))
        con.close()
        self.open = True

    def find(self):
        crets = []
        for i in range(len(self.boxes)):
            if self.boxes[i].currentText() == 'Любой':
                crets.append('')
            else:
                crets.append(self.boxes[i].currentText())
        good_names = []
        for i in range(len(self.rows)):
            bad = False
            line = self.rows[i]
            for j in range(len(line)):
                if crets[j]:
                    if str(line[j]) != str(crets[j]):
                        bad = True
                        break
            if not bad:
                n = self.categories.index(self.combobox_choose_cat.currentText())
                good_names.append(line[n])
        good_names = list(set(good_names))
        text = '\n'.join(list(map(str, good_names)))
        if not text:
            text = 'Ничего не найдено'
        self.plainTextEdit.setPlainText(text)
