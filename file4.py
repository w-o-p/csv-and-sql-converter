# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'flag.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys
import csv
import sqlite3
from PyQt5.QtWidgets import QApplication, QMainWindow, QMessageBox
from graph_convert import Ui_Conv
from new import Choose


class Metamorphose(Ui_Conv, QMainWindow):
    def __init__(self, name='', type='', table='new_table'):
        super().__init__()
        self.file_name1 = name.split('.')[0]
        self.file_name2 = ''
        self.file_type1 = type
        self.file_type2 = ''
        # self.table = 'new_table'
        self.table = table
        self.categories = []
        self.rows = []
        self.open = False

        self.setupUi(self)

        self.lineEdit.setText(self.file_name1)
        if self.file_type1 == 'csv':
            self.comboBox.setCurrentIndex(2)
        elif self.file_type1 == '.db':
            self.comboBox.setCurrentIndex(1)

        self.pushButton_convert.clicked.connect(self.convertation)
        self.pushButton_ch_table.clicked.connect(self.get_table)

    def convertation(self):
        try:
            self.table = self.ex.table
            self.file_name1 = self.lineEdit.text()
            self.file_type1 = self.comboBox.currentText()
            self.file_name2 = self.lineEdit_2.text()
            self.file_type2 = self.comboBox_2.currentText()
            if self.file_type1 == '.sqlite' or self.file_type1 == '.db':
                if self.file_type2 == '.csv':
                    try:
                        con = sqlite3.connect(self.file_name1 + self.file_type1)
                        cur = con.cursor()
                        result = cur.execute('''SELECT * FROM {}'''.format(self.table)).fetchall()
                        # result = cur.execute('''SELECT * FROM genres''').fetchall()
                        for i in range(len(cur.description)):
                            self.categories.append(cur.description[i][0])
                        for elem in result:
                            self.rows.append(list(elem))
                        con.close()

                        with open(self.file_name2 + self.file_type2, 'w', newline='', encoding='utf8') as csvfile:
                            writer = csv.writer(csvfile, delimiter=';', quotechar='"', quoting=csv.QUOTE_MINIMAL)
                            writer.writerow(self.categories)
                            for i in range(len(self.rows)):
                                writer.writerow(self.rows[i])
                        self.close()
                    except Exception:
                        self.label_warning.setText('Произошла ошибка')
                else:
                    self.label_warning.setText('Перевод в такой формат не поддерживается с открытым файлом')
            elif self.file_type1 == '.csv':
                if self.file_type2 == '.csv':
                    self.label_warning.setText('Перевод в такой формат не поддерживается с открытым файлом')
                else:
                    try:
                        with open(self.file_name1 + self.file_type1, encoding="utf8") as csvfile:
                            # self.open = True
                            reader = csv.reader(csvfile, delimiter=';', quotechar='"')
                            for index, row in enumerate(reader):
                                if index == 0:
                                    self.categories = row
                                else:
                                    self.rows.append(row)

                        con = sqlite3.connect(self.file_name2 + self.file_type2)
                        cur = con.cursor()
                        que = 'CREATE TABLE {} ( '.format(self.table)

                        for i in range(len(self.categories)):
                            self.categories[i] = '"' + self.categories[i] + '"'

                        add = []
                        for i in range(len(self.categories)):
                            if isinstance(self.rows[0][i], int):
                                add.append(str(self.categories[i]) + ' INTEGER')
                            else:
                                add.append(str(self.categories[i]) + ' STRING')
                        add = ','.join(add)
                        que += add + ' );'
                        cur.execute(que)

                        for i in range(len(self.rows)):
                            for j in range(len(self.rows[i])):
                                try:
                                    n = int(self.rows[i][j])
                                except Exception:
                                    self.rows[i][j] = '"' + self.rows[i][j] + '"'

                        for i in range(len(self.rows)):
                            con = sqlite3.connect(self.file_name2 + self.file_type2)
                            cur = con.cursor()
                            a = '''INSERT INTO {}({}) VALUES({})'''.format(self.table, ','.join(self.categories),
                                                                           ','.join(list(map(str, self.rows[i]))))
                            cur.execute(a)
                            con.commit()

                        con.close()
                        self.close()
                    except Exception:
                        self.label_warning.setText('Произошла ошибка')
        except Exception:
            self.label_warning.setText('Нужно выбрать таблицу, в которую делается конвертирование')

    def get_table(self):
        self.ex = Choose(self.file_name1 + self.file_type1, self.open, self.table, 'conv')
        self.ex.show()


if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = Metamorphose()
    ex.show()
    sys.exit(app.exec_())
