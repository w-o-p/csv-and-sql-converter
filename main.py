# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'flag.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys
import csv
import sqlite3
from PyQt5.QtWidgets import QApplication, QMainWindow, QFileDialog
from PyQt5 import QtCore, QtGui, QtWidgets
from file1 import Example
from file3 import Tabl
from file4 import Metamorphose
from new import Choose
from graph_menu import Ui_Menu


class Programm(Ui_Menu, QMainWindow):
    def __init__(self):
        super().__init__()
        self.file_type = ''
        self.file_name = ''
        self.open = False
        self.sql_read = False
        self.table = ''
        self.setupUi_menu(self)

        self.pushButton_table_search.clicked.connect(self.search)
        self.pushButton.clicked.connect(self.open_file)
        self.pushButton_table_print.clicked.connect(self.print)
        self.pushButton_convertation.clicked.connect(self.convertation)

    def open_file(self):
        if not self.lineEdit.text():
            filename = QFileDialog.getOpenFileName(self, 'Open file',
                                                   'c:\\', "files (*.db *.sqlite *.csv)")
            self.file_name = filename[0]
        else:
            self.file_name = self.lineEdit.text()
        if self.file_name:
            if '.' not in self.file_name:
                self.label_warnings.setText('Недопустимый формат файла')
            else:
                self.file_type = self.file_name.split('.')[-1]
                if self.file_type == 'csv':
                    try:
                        with open(self.file_name, encoding="utf8") as csvfile:
                            self.open = True
                            self.label_warnings.setText('Файл успешно открыт')
                    except Exception:
                        self.label_warnings.setText('Файл не найден')
                elif self.file_type == 'sqlite' or self.file_type == 'db' or self.file_type == 'db3':
                    try:
                        con = sqlite3.connect(self.file_name)
                        con.close()
                        self.file = Choose(self.file_name, self.open, self.table, self.label_warnings)
                        self.file.show()
                        self.sql_read = True
                    except Exception:
                        self.label_warnings.setText('Файл не найден')
                    # self.open = True
                    # self.table = 'films'

                else:
                    self.label_warnings.setText('Данный формат не поддерживается')

    def search(self):
        if self.sql_read:
            self.open = self.file.open
            self.table = self.file.table
        self.sql_read = False
        if self.open:
            self.ex = Example(self.file_name, self.file_type, self.table)
            self.ex.show()

    def print(self):
        if self.sql_read:
            self.open = self.file.open
            self.table = self.file.table
        self.sql_read = False
        if self.open:
            self.ex = Tabl(self.file_name, self.file_type, self.table)
            self.ex.show()

    def convertation(self):
        if self.sql_read:
            self.open = self.file.open
            self.table = self.file.table
        self.sql_read = False
        if self.open:
            self.ex = Metamorphose(self.file_name, self.file_type, self.table)
            self.ex.show()


if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = Programm()
    ex.show()
    sys.exit(app.exec_())
